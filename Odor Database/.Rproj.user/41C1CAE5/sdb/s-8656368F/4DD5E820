{
    "contents" : "## Packages\nlibrary(\"dplyr\")\nlibrary(\"tidyr\")\nlibrary(\"stringr\")\nlibrary(\"pipeR\")\nlibrary(\"readr\")\nlibrary(\"rvest\")\nlibrary(\"httr\")\nlibrary(\"purrr\")\nlibrary(\"webchem\")\n\n# Functions\nget_cid_from_smiles = function(MY_SMILES) {\n  MY_CID = get_cid(query = MY_SMILES, from = \"smiles\", first = T)\n  if (!is.na(MY_CID)) {\n    out = pc_prop(cid = MY_CID, properties = \"CanonicalSMILES\") %>>%\n      mutate(input = MY_SMILES, check = CanonicalSMILES == input)\n  } else {\n    out = data_frame(CID = NA, CanonicalSMILES = NA, input = MY_SMILES, check = NA)\n  }\n  return(out)\n}\n\nget_density_from_cid = function(cid) {\n  if (is.na(cid)) {\n    out = \"\" #I changed this from NA without quotation marks\n  } \n  else {\n    url = sprintf(\"https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/%s/JSON/\", cid)\n    out = tryCatch({\n      url_got = GET(url, user_agent(\"myagent\"))\n      source_PubChem = read_html(url_got) %>>% html_text()\n      density = str_replace_all(source_PubChem, '\\\\\"', '') %>>% \n        str_split('Name: Density,\\n                    StringValue: ') %>>% unlist() %>>% \n        map_chr(~ str_split(.x, \"\\n\", n = 2) %>>% (.[[1]][1])) %>>% \n        (.[str_detect(., \"\\\\d+\")]) %>>% \n        paste(collapse = \" | \")\n      return(density)\n    }, \n    error = function(e) {\n      cat(\"Error:\", conditionMessage(e), \"\\n\")\n      density = NA\n      return(density)\n    }, \n    silent = TRUE\n    )\n  }\n  return(out)\n}\n\n####try to get CAS from this####\n# get_CAS_from_cid = function(cid) {\n#   if (is.na(cid)) {\n#     out = \"\" #I changed this from NA without quotation marks\n#   }\n#   else {\n#     url = sprintf(\"https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/%s/JSON/\", cid)\n#     out = tryCatch({\n#       url_got = GET(url, user_agent(\"myagent\"))\n#       source_PubChem = read_html(url_got) %>>% html_text()\n#       density = str_replace_all(source_PubChem, '\\\\\"', '') %>>% \n#         str_split('Name: IUPAC Name,\\n                    StringValue: ') %>>% unlist() %>>% \n#         map_chr(~ str_split(.x, \"\\n\", n = 2) %>>% (.[[1]][1])) %>>% \n#         (.[str_detect(., \"\\\\d+\")]) %>>% \n#         (.[1]) #get just the first CAS\n#         #paste(collapse = \" | \")\n#       return(density)\n#     }, \n#     error = function(e) {\n#       cat(\"Error:\", conditionMessage(e), \"\\n\")\n#       density = NA\n#       return(density)\n#     }, \n#     silent = TRUE\n#     )\n#   }\n#   return(out)\n# }\n\nget_MW_from_cid = function(cid) {\n  if (is.na(cid)) {\n    out = \"\" #I changed this from NA without quotation marks\n  } \n  else {\n    url = sprintf(\"https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/%s/JSON/\", cid)\n    out = tryCatch({\n      url_got = GET(url, user_agent(\"myagent\"))\n      source_PubChem = read_html(url_got) %>>% html_text()\n      density = str_replace_all(source_PubChem, '\\\\\"', '') %>>% \n        str_split('Name: Molecular Weight,\\n                    NumValue: ') %>>% unlist() %>>% \n        map_chr(~ str_split(.x, \"\\n\", n = 2) %>>% (.[[1]][1])) %>>% \n        (.[str_detect(., \"\\\\d+\")]) %>>% \n        paste(collapse = \" | \")\n      return(density)\n    }, \n    error = function(e) {\n      cat(\"Error:\", conditionMessage(e), \"\\n\")\n      density = NA\n      return(density)\n    }, \n    silent = TRUE\n    )\n  }\n  return(out)\n}\n\n\n# Example\n# smiles = data_frame(smiles = c(\"CC1=CC(=C(C(=C1)C(C)(C)C)O)C(C)(C)C\", \n#                                \"CC=O\",\n#                                \"CC1CC(C2=C(C1(C)C)C=C(C(=C2)C(=O)C)C)(C)C\",\n#                                \"CSC\",\n#                                \"C1CCCCC1\",\n#                                \"C1CCN(CC1)C(=O)/C=C/C=C/C2=CC3=C(C=C2)OCO3\",\n#                                \"C1CCCCCCCOC(=O)CCCCCC1\",\n#                                \"C1=CC=C(C=C1)CC(C(=O)O)N\",\n#                                \"CCCC(=O)OCC(COC(=O)CCC)OC(=O)CCC\",\n#                                \"C([C@H]([C@H]([C@@H]([C@H](CO)O)O)O)O)O\",\n#                                \"C1CC(=O)OC2=CC=CC=C21\",\n#                                \"CCOC(=O)CCSCC1=CC=CO1\",\n#                                \"C([C@@H]1[C@H]([C@H](C(O1)O)O)O)O\",\n#                                \"C(I)(I)I\",\n#                                \"C1C(SCC(S1)O)O\",\n#                                \"CC1=C(C(=C(C(=C1[N+](=O)[O-])C(C)(C)C)[N+](=O)[O-])C)C(=O)C\",\n#                                \"C1=CC=C2C(=C1)C=CC(=O)O2\",\n#                                \"C1=CC=NC=C1\",\n#                                \"C1=CN=CC=N1\",\n#                                \"C1=CSC=C1\"))\n\n#smiles = data_frame(smiles = \"C1=CSC=C1\")\ncid <- 1254\nsetwd(\"/Volumes/mainland/Projects/TAARs/Symrise\\ -\\ New\\ Odors/Odor\\ Database\")\nsmiles <- read.csv(\"AKOS.can\", header = FALSE, sep = \"\")\nnames(smiles) <- c(\"smiles\", \"AKOS\")\n\n# Read your smiles list\n# smiles = read_csv()\n\n#####dataframe output#####\n# SMILES -> Pubchem ID\ncid_smiles = smiles$smiles %>>% map_df(get_cid_from_smiles)\n#write.csv(cid_smiles, \"fromDensity_cid_smiles.csv\")\ncid_smiles<- read.csv(\"fromDensity_cid_smiles.csv\") %>>% (.[,2:ncol(cid_smiles)])\n\n# Pubchem ID -> density\ncid_smiles_density = cid_smiles %>>% rowwise() %>>% mutate(density = get_density_from_cid(CID)) %>>% ungroup()\n# Save\n#write.csv(cid_smiles_density, \"cid_smiles_density.csv\")\n\n#get MW too\ncid_smiles_MW = cid_smiles_density %>>% rowwise() %>>% mutate(MW = get_MW_from_cid(CID)) %>>% ungroup() \n#cid_smiles_MW <- cid_smiles_MW_backup\n#remove the commas\ncid_smiles_MW$MW <- gsub(\",\", \"\", cid_smiles_MW$MW)\nodors_dataframe <- merge(cid_smiles_MW, smiles, by.x = \"input\", by.y = \"smiles\")#add AKOS numbers\nwrite.csv(odors_dataframe, \"odorDatabasefromAKOS.csv\") #saves this midpoint\n\n\n\n",
    "created" : 1486581303290.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "259348973",
    "id" : "4DD5E820",
    "lastKnownWriteTime" : 1487093373,
    "path" : "/Volumes/mainland/Projects/TAARs/Symrise - New Odors/Odor Database/density_modified_MK.R",
    "project_path" : "density_modified_MK.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}