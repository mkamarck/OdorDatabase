)
}
return(out)
}
rm(csid_density)
csid_density = df %>>% rowwise() %>>% mutate(density = get_density_from_csid(csid)) %>>% ungroup()
View(csid_density)
write_csv(csid_density, "SymriseOdors_Final.csv")
?write.csv
csid_density$CAS <- toString(csid$CAS)
?toString
csid_density$CAS <- toString(csid_density$CAS)
View(csid_density)
library("dplyr")
library("tidyr")
library("stringr")
library("pipeR")
library("readr")
library("rvest")
library("httr")
library("purrr")
library("webchem")
View(df)
View(df.2)
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/ChemID_MW_SMILES_everything.csv")
df.test <- df[1:10,]
?get_cid
View(df.test)
get_cid_from_name = function(name, MY_SMILES) {
MY_CID = get_cid(query = name, from = "name", first = T)
if (!is.na(MY_CID)) {
out = pc_prop(cid = MY_CID, properties = "CanonicalSMILES") %>>%
mutate(input = MY_SMILES, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, input = MY_SMILES, check = NA)
}
return(out)
}
cid_smiles <- get_cid_from_smiles(df.test$Name, df.test$SMILE)
cid_smiles <- get_cid_from_name(df.test$Name, df.test$SMILE)
warnings()
get_cid_from_name = function(name, MY_SMILES) {
MY_CID = get_cid(query = name, from = "name", first = T, arg = c(name_type = word)))
if (!is.na(MY_CID)) {
out = pc_prop(cid = MY_CID, properties = "CanonicalSMILES") %>>%
mutate(input = MY_SMILES, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, input = MY_SMILES, check = NA)
}
return(out)
}
get_cid_from_name = function(name, MY_SMILES) {
MY_CID = get_cid(query = name, from = "name", first = T, arg = c(name_type = word))
if (!is.na(MY_CID)) {
out = pc_prop(cid = MY_CID, properties = "CanonicalSMILES") %>>%
mutate(input = MY_SMILES, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, input = MY_SMILES, check = NA)
}
return(out)
}
cid_smiles <- get_cid_from_name(df.test$Name, df.test$SMILE)
get_cid_from_name = function(name, MY_SMILES) {
MY_CID = get_cid(query = name, from = "name", first = T, name_type = word)
if (!is.na(MY_CID)) {
out = pc_prop(cid = MY_CID, properties = "CanonicalSMILES") %>>%
mutate(input = MY_SMILES, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, input = MY_SMILES, check = NA)
}
return(out)
}
cid_smiles <- get_cid_from_name(df.test$Name, df.test$SMILE)
warnings()
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/csid_compare.csv")
View(df)
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/ChemID_MW_SMILES_everything.csv")
df.test <- df[1:10,]
View(df.test)
test = 100-06-1
url = sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/xref/RegistryID/%s/JSON", test)
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got) %>>% html_text()
source_PubChem
test = "100-06-1"
url = sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/xref/RegistryID/%s/JSON", test)
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got) %>>% html_text()
source_PubChem
cid = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('cid\ : ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
paste(collapse = " | ")
cid
str_split('cid\ : ') %>>% unlist()
cid = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('cid\: ') %>>% unlist()
cid = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('cid: ') %>>% unlist()
cid
cid = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('cid: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
paste(collapse = " | ")
cid
get_cid_from_CAS = function(CAS) {
if (is.na(CAS)) {
out = "NA" #I changed this from NA without quotation marks
}
else {
url = sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/xref/RegistryID/%s/JSON", CAS)
out = tryCatch({
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got) %>>% html_text()
cid = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('cid: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
paste(collapse = " | ")
return(cid)
},
error = function(e) {
cat("Error:", conditionMessage(e), "\n")
cid = NA
return(cid)
},
silent = TRUE
)
}
return(out)
}
View(df.test)
add_cid = df.test %>>% rowwise() %>>% mutate(CID = get_cid_from_CAS(CAS)) %>>% ungroup()
View(df.test)
View(add_cid)
add_cid = df %>>% rowwise() %>>% mutate(CID = get_cid_from_CAS(CAS)) %>>% ungroup()
get_cid_from_CAS = function(CAS) {
if (is.na(CAS)) {
out = "" #I changed this from NA without quotation marks
}
else {
url = sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/xref/RegistryID/%s/JSON", CAS)
out = tryCatch({
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got) %>>% html_text()
cid = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('cid: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
paste(collapse = " | ")
return(cid)
},
error = function(e) {
cat("Error:", conditionMessage(e), "\n")
cid = ""
return(cid)
},
silent = TRUE
)
}
return(out)
}
add_cid = df.test %>>% rowwise() %>>% mutate(CID = get_cid_from_CAS(CAS)) %>>% ungroup()
View(add_cid)
add_cid = df %>>% rowwise() %>>% mutate(CID = get_cid_from_CAS(CAS)) %>>% ungroup()
View(add_cid)
add_cid2 <- add_cid
add_query = df.test %>>% rowwise() %>>% mutate(cas.test = cir_query(csid, cas, resolver = name_by_chemspider)) %>>% ungroup()
df_forloop <- df.test
df.test$test_cas = ""
df_forloop <- df.test
for (i in 1:length(df_forloop)){
csid = df_forloop$csid[i]
df_forloop$test_cas[i] = cirquery(csid, cas, resolver = name_by_chemspider)
}
for (i in 1:length(df_forloop)){
csid = df_forloop$csid[i]
df_forloop$test_cas[i] = cir_query(csid, cas, resolver = name_by_chemspider)
}
df.test$csid = as.factor(df.test$csid)
df_forloop <- df.test
for (i in 1:length(df_forloop)){
csid = df_forloop$csid[i]
df_forloop$test_cas[i] = cir_query(csid, cas, resolver = name_by_chemspider)
}
csid = df_forloop$csid[i]
csid
for (i in 1:length(df_forloop)){
csid = df_forloop$csid[i]
df_forloop$test_cas[i] = cir_query(df_forloop$csid[i], cas, resolver = name_by_chemspider)
}
df.test$test_cas = as.factor("")
df_forloop <- df.test
for (i in 1:length(df_forloop)){
csid = df_forloop$csid[i]
df_forloop$test_cas[i] = cir_query(csid, cas, resolver = name_by_chemspider)
}
?cir_query
for (i in 1:length(df_forloop)){
csid = df_forloop$csid[i]
df_forloop$test_cas[i] = cir_query(csid, 'cas', resolver = 'name_by_chemspider')
}
View(df_forloop)
csid
df.test$csid[1]
df.test$csid
df.test$csid[1]
for (i in 1:length(df_forloop)){
csid = as.factor(df_forloop$csid[i])
df_forloop$test_cas[i] = cir_query(csid, 'cas', resolver = 'name_by_chemspider')
}
cid_query
?cid_query
test_smiles <- mutate(df.test, pc_prop(df$CID, properties = c('MolecularFormula', 'MolecularWeight', 'CanonicalSMILES')))
test_smiles <-pc_prop(df$CID, properties = c('MolecularFormula', 'MolecularWeight', 'CanonicalSMILES'))
get_smiles_from_cid = function(CID) {
#MY_CID = get_cid(query = MY_SMILES, from = "smiles", first = T)
if (!is.na(CID)) {
out = pc_prop(cid = CID, properties = c("MolecularWeight", "CanonicalSMILES") %>>%
mutate(input = SMILE, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, input = MY_SMILES, check = NA)
}
return(out)
}
get_smiles_from_cid = function(CID) {
#MY_CID = get_cid(query = MY_SMILES, from = "smiles", first = T)
if (!is.na(CID)) {
out = pc_prop(cid = CID, properties = c("MolecularWeight", "CanonicalSMILES")) %>>%
mutate(input = SMILE, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, input = MY_SMILES, check = NA)
}
return(out)
}
cid.next = df.test$CID %>>% map_df(get_smiles_from_cid)
cid.next = df.test$CID %>>% map_df(get_smiles_from_cid)
get_smiles_from_cid = function(CID) {
#MY_CID = get_cid(query = MY_SMILES, from = "smiles", first = T)
if (!is.na(CID)) {
out = pc_prop(cid = CID, properties = c("MolecularWeight", "CanonicalSMILES")) %>>%
mutate(input = SMILE, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, check = NA)
}
return(out)
}
#df_forloop$test_cas[i] = cir_query(csid, 'cas', resolver = 'name_by_chemspider')
cid.next = df.test$CID %>>% map_df(get_smiles_from_cid)
View(add_cid)
write.csv(add_cid, "/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/add_cid.csv")
get_cid_from_smiles = function(MY_SMILES) {
MY_CID = get_cid(query = MY_SMILES, from = "smiles", first = T)
if (!is.na(MY_CID)) {
out = pc_prop(cid = MY_CID, properties = "CanonicalSMILES") %>>%
mutate(input = MY_SMILES, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, input = MY_SMILES, check = NA)
}
return(out)
}
add_smiles = add_cid %>>% rowwise() %>>% mutate(smiles_fromCID = get_smiles_from_CID(CID)) %>>% ungroup()
get_smiles_from_CID = function(CID) {
if (is.na(CID)) {
out = "" #I changed this from NA without quotation marks
}
else {
url = sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/%s/property/CanonicalSMILES/JSON", CID)
out = tryCatch({
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got) %>>% html_text()
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>% (.[2] )
return(smile)
},
error = function(e) {
cat("Error:", conditionMessage(e), "\n")
smile = ""
return(smile)
},
silent = TRUE
)
}
return(out)
}
add_smiles = add_cid %>>% rowwise() %>>% mutate(smiles_fromCID = get_smiles_from_CID(CID)) %>>% ungroup()
df.test <- add_smiles{1:10,}
df.test <- add_smiles[1:10,]
test_smiles = df.test$SMILE %>>% map_df(get_cid_from_smiles)
View(test_smiles)
test_smiles = add_smiles$SMILE %>>% map_df(get_cid_from_smiles)
get_cid_from_smiles = function(MY_SMILES) {
MY_CID = get_cid(query = MY_SMILES, from = "smiles", first = T)
if (!is.na(MY_CID)) {
out = pc_prop(cid = MY_CID, properties = "CanonicalSMILES")
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA)
}
return(out)
}
test_smiles = df.test$SMILE %>>% map_df(get_cid_from_smiles)
View(add_smiles)
View(add_smiles)
View(test_smiles)
test_smiles = add_smiles$SMILE %>>% map_df(get_cid_from_smiles)
warnings()
View(test_smiles)
test_smiles = get_cid_from_smiles(df.test$SMILE)
View(test_smiles)
View(test_smiles)
test_smiles = get_cid_from_smiles(add_smiles$SMILE)
warnings()
get_cid_from_smiles = function(MY_SMILES) {
MY_CID = get_cid(query = MY_SMILES, from = "smiles", first = T)
}
test_smiles = df.test(add_smiles$SMILE)
test_smiles = get_cid_from_smiles(df.test$SMILE)
add_smiles2 = add_smiles
df.test$cid_from_csidSMILE = get_cid_from_smiles(df.test$SMILE)
View(df.test)
add_smiles$cid_from_csidSMILE = get_cid_from_smiles(add_smiles$SMILE)
View(add_smiles)
add_smiles$check= add_smiles$CID == add_smiles$cid_from_csidSMILE
write.csv(add_smiles, "/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/cid_checkByHand.csv")
install.packages("catterplots")
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/intermediate\ databases/final_CIDandCAS.csv")
df.noID <- df[which(is.na(CID)),]
View(df)
df.noID <- df[which(is.na(df$CID)),]
library("dplyr")
library("tidyr")
library("stringr")
library("pipeR")
library("readr")
library("rvest")
library("httr")
library("purrr")
library("webchem")
View(df.noID)
df <- df[which(!is.na(df$CID)),]
View(df)
get_properties_from_cid = function(MY_CID) {
out = pc_prop(cid = My_CID, properties = c("CanonicalSMILES", "Molecular Weight"))
return(out)
}
df.test <- df[1:10,]
get_properties_from_cid = function(MY_CID) {
canSmiles = pc_prop(cid = My_CID, properties = "CanonicalSMILES")
MolW = pc_prop(cid = MY_CID, properties = "Molecular Weight")
return(canSmiles, MolW)
}
result.properties = get_properties_from_cid(df.test$CID)
result.properties = df.test %>>% rowwise() %>>% get_properties_from_cid(CID)
result.properties = df.test %>>% rowwise() %>>% get_properties_from_cid(.x,CID)
?map_df
?rowwise
result.properties = rowwise(df.test$CID) %>>% get_properties_from_cid(.x)
CID = 1
get_properties_from_cid(1)
?pc_prop
get_properties_from_cid(7533)
CID_List <- df.test$CID
result.properties = get_properties_from_cid(CID_List)
get_properties_from_cid = function(MY_CID) {
canSmiles = pc_prop(cid = MY_CID, properties = "CanonicalSMILES")
MolW = pc_prop(cid = MY_CID, properties = "Molecular Weight")
return(canSmiles, MolW)
}
result.properties = get_properties_from_cid(CID_List)
result.properties = get_properties_from_cid(CID_List)
get_properties_from_cid(CID_List)
get_properties_from_cid(CID_List)
get_properties_from_cid = function(MY_CID) {
canSmiles = pc_prop(cid = MY_CID, properties = "CanonicalSMILES")
#MolW = pc_prop(cid = MY_CID, properties = "Molecular Weight")
return(canSmiles)
}
get_properties_from_cid(CID_List)
get_properties_from_cid = function(MY_CID) {
#canSmiles = pc_prop(cid = MY_CID, properties = "CanonicalSMILES")
MolW = pc_prop(cid = MY_CID, properties = "Molecular Weight")
return(MolW)
}
get_properties_from_cid(CID_List)
get_properties_from_cid = function(MY_CID) {
canSmiles = pc_prop(cid = MY_CID, properties = "CanonicalSMILES")
MolW = pc_prop(cid = MY_CID, properties = "MolecularWeight")
return(MolW)
}
get_properties_from_cid(CID_List)
return.properties = get_properties_from_cid(CID_List)
View(return.properties)
get_properties_from_cid = function(MY_CID) {
canSmiles = pc_prop(cid = MY_CID, properties = "CanonicalSMILES")
MolW = pc_prop(cid = MY_CID, properties = "MolecularWeight")
return(canSmiles, MolW)
}
return.properties = get_properties_from_cid(CID_List)
get_properties_from_cid = function(MY_CID) {
#canSmiles = pc_prop(cid = MY_CID, properties = "CanonicalSMILES")
#MolW = pc_prop(cid = MY_CID, properties = "MolecularWeight")
properties_byCID = pc_prop(cid = MY_CID, properties = "CanonicalSMILES", "MolecularWeight")
return(properties_byCID)
}
return.properties = get_properties_from_cid(CID_List)
get_properties_from_cid = function(MY_CID) {
#canSmiles = pc_prop(cid = MY_CID, properties = "CanonicalSMILES")
#MolW = pc_prop(cid = MY_CID, properties = "MolecularWeight")
properties_byCID = pc_prop(cid = MY_CID, properties = c("CanonicalSMILES", "MolecularWeight"))
return(properties_byCID)
}
return.properties = get_properties_from_cid(CID_List)
View(return.properties)
return.properties = get_properties_from_cid(df.test$CID)
View(return.properties)
return.properties = get_properties_from_cid(df$CID)
View(return.properties)
df.merge <- merge(df, return.properties)
View(df.merge)
df.merge=unique(df.merge)
get_density_from_csid = function(csid) {
if (is.na(csid)) {
out = "NA" #I changed this from NA without quotation marks
}
else {
url = sprintf("www.chemspider.com/Chemical-Structure.%s.html", csid)
out = tryCatch({
url_got = GET(url, user_agent('6c2e700b-6a92-4551-9cc1-70f28c021f23'))
source_ChemSpi = read_html(url_got) %>>% html_text()
density = str_replace_all(source_ChemSpi, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
str_split("[^0-9.]",n = 2) %>>% (.[[1]][1]) #added in this line to just get the number of the density and not the units
return(density)
},
error = function(e) {
cat("Error:", conditionMessage(e), "\n")
density = "NA"
return(density)
},
silent = TRUE
)
}
return(out)
}
return_density = df.test %>>% rowwise() %>>% mutate(density = get_density_from_csid(csid)) %>>% ungroup()
View(return_density)
return_density = df.merge %>>% rowwise() %>>% mutate(density = get_density_from_csid(csid)) %>>% ungroup()
View(return_density)
write.csv(return_density, "/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/SymriseOdors_AllInfo.csv")
max(return_density$density)
max(return_density$density, na.rm = T)
?max
max(return_density$density, na.rm = TRUE)
min(return_density$density, na.rm = TRUE)
final.output = rbind(return_density, df.noID)
?rbind
df.noID$MolecularWeight = ""
df.noID$CanonicalSMILES = ""
df.noID$density = ""
final.output = rbind(return_density, df.noID)
View(final.output)
write.csv(final.output, "/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/SymriseOdors_AllInfo.csv")
## Packages
library("dplyr")
library("tidyr")
library("stringr")
library("pipeR")
library("readr")
library("rvest")
library("httr")
library("purrr")
library("webchem")
get_density_from_csid = function(csid) {
if (csid == 0) {
out = "NA" #I changed this from NA without quotation marks
}
else {
url = sprintf("www.chemspider.com/Chemical-Structure.%s.html", csid)
out = tryCatch({
url_got = GET(url, user_agent('6c2e700b-6a92-4551-9cc1-70f28c021f23'))
source_ChemSpi = read_html(url_got) %>>% html_text()
density = str_replace_all(source_ChemSpi, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
str_split("[^0-9.]",n = 2) %>>% (.[[1]][1]) #added in this line to just get the number of the density and not the units
return(density)
},
error = function(e) {
cat("Error:", conditionMessage(e), "\n")
density = "NA"
return(density)
},
silent = TRUE
)
}
return(out)
}
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/foreign_odorDatabase_with_csid.csv")
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/foreign_odorDatabase_with_csid.csv")
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Odor\ Database/foreign_odorDatabase_with_csid.csv")
csid_density = df %>>% rowwise() %>>% mutate(density = get_density_from_csid(csid)) %>>% ungroup()
View(csid_density)
View(df)
write_csv(csid_density, "foreignOdors_density_info.csv")
