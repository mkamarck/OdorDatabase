library("dplyr")
library("tidyr")
library("stringr")
library("pipeR")
library("readr")
library("rvest")
library("httr")
library("purrr")
library("webchem")
?get_CID
?"webchem"
?purrrr
?purrr
?purrrr
?grep
View(df)
CID = 11022861
url = sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/%s/JSON/", cid)
cid = CID
url = sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/%s/JSON/", cid)
url = "www.chemspider.com/Chemical-Structure.2157.html"
out = tryCatch({
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got)
)
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got)
source_PubChem
source_PubChem[1]
source_PubChem[2]
source_PubChem[[1]]
?GET
url_got = GET(url, user_agent('6c2e700b-6a92-4551-9cc1-70f28c021f23'))
source_PubChem = read_html(url_got)
source_PubChem
source_chemSpi <- readHTMLTable(url_got)
?scan
source_chemSpi <- scan(url_got)
source_chemSpi <- scan(url)
?pc_prop
url_got = GET(url, user_agent('6c2e700b-6a92-4551-9cc1-70f28c021f23'))
source_PubChem = read_html(url_got) %>>% html_text()
source_PubChem
?str_split
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n                     ') %>>% unlist()
density
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
paste(collapse = " | ")
str_split('Name: Density:\r\n                    \r\n                     ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
str_split('Name: Density:\r\n                    \r\n                     ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2)
)
density = str_replace_all(source_PubChem, '\\"', '')
source_PubChem
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n                     ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2)
%>>% (.[[1]][1]))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n                   ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1]))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n                   ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2))
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n                   ') %>>% unlist()
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1]))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\r\n", n = 2) %>>% (.[[1]][1]))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n                    ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\r\n", n = 2) %>>% (.[[1]][1]))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n                     ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\r\n", n = 2) %>>% (.[[1]][1]))
density
?map_chr
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:\r\n                    \r\n                      ') %>>% unlist() %>>%
map(~ str_split(.x, "\r\n", n = 2))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Name: Density:') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\r\n", n = 2)%>>% (.[[1]][1]))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Density:\r\n                    \r\n                      ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\r\n", n = 2) %>>% (.[[1]][1]))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Density:\r\n                    \r\n                      ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1]))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1]))
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")])
density
?grep
str_detect?
)
?str_detect
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+.\\d+")])
density
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., paste("\\d+"."\\d+"))])
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")])
density
?gsub
density2 <- gsub("([0-9]+.*$", density)
density2 <- sub("([0-9]+.*$", density)
density2 <- as.numeric(gsub("[^\\d]+", "", density))
?str_split
density2 <- str_split(density, "\\d+", n = 2)
density2
as.numeric(gsub("[^0-9.]","",density))
density2 <- str_split(density, "[^0-9.]",n = 2)
density2
density2 <- str_split(density, "[^0-9.]",n = 2) %>>% (.[[1]][1])
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
str_split(.x, "[^0-9.]",n = 2) %>>% (.[[1]][1])
density = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
str_split( "[^0-9.]",n = 2) %>>% (.[[1]][1])
?sprintf
csid  <- 2157
rm(density)
url = sprintf("www.chemspider.com/Chemical-Structure.%s.html", cid)
url = sprintf("www.chemspider.com/Chemical-Structure.%s.html", csid)
url_got = GET(url, user_agent('6c2e700b-6a92-4551-9cc1-70f28c021f23'))
source_ChemSpi = read_html(url_got) %>>% html_text()
density = str_replace_all(source_ChemSpi, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
str_split("[^0-9.]",n = 2) %>>% (.[[1]][1])
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/SymriseOdorList_forChemSpiPy.csv")
?grep
df$CAS_1 <- grept(";",df$CAS)
df$CAS_1 <- grep(";",df$CAS)
View(df)
?csplit
install.packages("splitstackshape")
library("splitstackshape")
?csplit
CAS<-cSplit(df, "CAS.no.",";")
View(CAS)
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/SymriseOdorList_forChemSpiPy.csv") %>>%
cSplit("CAS.no.",";")
View(df)
df.noCAS <- df(which[is.na(df$CAS.no._1),])
df.noCAS <- df(which[df$CAS.no._1 == "NA",])
df.noCAS <- df[which(df$CAS.no._1 == "NA"),]
df.noCAS <- df[which(is.na(df$CAS.no._1),]
df.noCAS <- df[which(is.na(df$CAS.no._1)),]
View(df.noCAS)
df.CAS <- df[which(!is.na(df$CAS.no._1)),]
write.csv(df.noCAS, "/Users/mkamarck/Documents/chemspipy/Symrise.noCAS.csv")
write.csv(df.CAS, "/Users/mkamarck/Documents/chemspipy/Symrise.CAS.csv")
View(df)
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/ChemID_MW_SMILES_everything.csv")
df.test <- df[1:10,:]
df.test <- df[1:10,]
View(df)
View(df.2)
View(df.test)
get_density_from_csid = function(csid) {
if (csid == 0) {
out = "NA" #I changed this from NA without quotation marks
}
else {
url = sprintf("www.chemspider.com/Chemical-Structure.%s.html", csid)
out = tryCatch({
url_got = GET(url, user_agent('6c2e700b-6a92-4551-9cc1-70f28c021f23'))
source_ChemSpi = read_html(url_got) %>>% html_text()
density = str_replace_all(source_ChemSpi, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
str_split("[^0-9.]",n = 2) %>>% (.[[1]][1]) #added in this line to just get the number of the density and not the units
return(density)
},
error = function(e) {
cat("Error:", conditionMessage(e), "\n")
density = NA
return(density)
},
silent = TRUE
)
}
return(out)
}
library("dplyr")
library("tidyr")
library("stringr")
library("pipeR")
library("readr")
library("rvest")
library("httr")
library("purrr")
library("webchem")
csid_density = df.test %>>% rowwise() %>>% mutate(density = get_density_from_csid(csid)) %>>% ungroup()
View(csid_density)
csid_density = df %>>% rowwise() %>>% mutate(density = get_density_from_csid(csid)) %>>% ungroup()
View(csid_density)
get_density_from_csid = function(csid) {
if (csid == 0) {
out = "NA" #I changed this from NA without quotation marks
}
else {
url = sprintf("www.chemspider.com/Chemical-Structure.%s.html", csid)
out = tryCatch({
url_got = GET(url, user_agent('6c2e700b-6a92-4551-9cc1-70f28c021f23'))
source_ChemSpi = read_html(url_got) %>>% html_text()
density = str_replace_all(source_ChemSpi, '\\"', '') %>>%
str_split('Density:\r\n                                            \r\n                                                ') %>>%
unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
str_split("[^0-9.]",n = 2) %>>% (.[[1]][1]) #added in this line to just get the number of the density and not the units
return(density)
},
error = function(e) {
cat("Error:", conditionMessage(e), "\n")
density = "NA"
return(density)
},
silent = TRUE
)
}
return(out)
}
rm(csid_density)
csid_density = df %>>% rowwise() %>>% mutate(density = get_density_from_csid(csid)) %>>% ungroup()
View(csid_density)
write_csv(csid_density, "SymriseOdors_Final.csv")
?write.csv
csid_density$CAS <- toString(csid$CAS)
?toString
csid_density$CAS <- toString(csid_density$CAS)
View(csid_density)
library("dplyr")
library("tidyr")
library("stringr")
library("pipeR")
library("readr")
library("rvest")
library("httr")
library("purrr")
library("webchem")
install.packages("pipeR")
library("pipeR")
install.packages("readr")
library("readr")
library("rvest")
install.packages("rvest")
library("rvest")
install.packages("httr")
library("dplyr")
library("tidyr")
library("stringr")
library("pipeR")
library("readr")
library("rvest")
library("httr")
library("purrr")
install.packages("purrr")
install.packages("webchem")
library("dplyr")
library("tidyr")
library("stringr")
library("pipeR")
library("readr")
library("rvest")
library("httr")
library("purrr")
library("webchem")
get_cid_from_CAS = function(CAS) {
if (is.na(CAS)) {
out = "" #I changed this from NA without quotation marks
}
else {
url = sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/xref/RegistryID/%s/JSON", CAS)
out = tryCatch({
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got) %>>% html_text()
cid = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('cid: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>%
(.[str_detect(., "\\d+")]) %>>%
paste(collapse = " | ")
return(cid)
},
error = function(e) {
cat("Error:", conditionMessage(e), "\n")
cid = ""
return(cid)
},
silent = TRUE
)
}
return(out)
}
df <- read.csv("/Volumes/mainland/Projects/TAARs/Symrise\ -\ New\ Odors/Symrise\ Odor\ Database/ChemID_MW_SMILES_everything.csv")
df <- read.csv("/Users/mkamarck/Documents/School\ and\ Lab/Mainland\ Lab/OdorDatabase/Odor\ Database/csid_compare.csv")
df.test <- df[1:10,]
df <- read.csv("/Users/mkamarck/Documents/School\ and\ Lab/Mainland\ Lab/OdorDatabase/Symrise\ Odor\ Database/csid_compare.csv")
df.test <- df[1:10,]
add_cid = df %>>% rowwise() %>>% mutate(CID = get_cid_from_CAS(CAS)) %>>% ungroup()
add_cid = df.test %>>% rowwise() %>>% mutate(CID = get_cid_from_CAS(CAS)) %>>% ungroup()
View(add_cid)
add_cid = df %>>% rowwise() %>>% mutate(CID = get_cid_from_CAS(CAS)) %>>% ungroup()
View(add_cid)
View(add_cid)
write.csv(add_cid, "/Users/mkamarck/Documents/School\ and\ Lab/Mainland\ Lab/OdorDatabase/Symrise\ Odor\ Database/add_cid.csv")
add_cid2 <- add_cid
get_smiles_from_cid = function(CID) {
#MY_CID = get_cid(query = MY_SMILES, from = "smiles", first = T)
if (!is.na(CID)) {
out = pc_prop(cid = CID, properties = c("MolecularWeight", "CanonicalSMILES")) %>>%
mutate(input = SMILE, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, check = NA)
}
return(out)
}
df.test$smiles_fromCID = ""
df.test$MW_fromCID = ""
df_forLoop = df.test
for (i in 1:length(df_forLoop)){
cid = df_forLoop$CID[i]
result = pc_prop(cid = cid, properties = c("MolecularWeight", "CanonicalSMILES"))
df_forLoop$smiles_fromCID[i] = result[1]
df_forLoop$MW_fromCID[i] = result[2]
}
for (i in 1:length(df_forLoop)){
cid = df_forLoop$CID[i]
df_forLoop$smiles_fromCID[i] = pc_prop(cid = cid, properties = "CanonicalSMILES")
}
cid
df.test = add_cid[1:10,]
View(df.test)
df.test$smiles_fromCID = ""
df.test$MW_fromCID = ""
df_forLoop = df.test
for (i in 1:length(df_forLoop)){
cid = df_forLoop$CID[i]
if (!is.na(cid)){
df_forLoop$smiles_fromCID[i] = pc_prop(cid = cid, properties = "CanonicalSMILES")
}
}
cid
pc_prop(cid = cid, properties = "CanonicalSMILES")
?pc_prop
for (i in 1:length(df_forLoop)){
cid = df_forLoop$CID[i]
if (!is.na(cid)){
df_forLoop$smiles_fromCID[i] = pc_prop(cid, properties = "CanonicalSMILES")
}
}
df.test$CID <- as.integer(df.test$CID)
df_forLoop = df.test
for (i in 1:length(df_forLoop)){
cid = df_forLoop$CID[i]
if (!is.na(cid)){
df_forLoop$smiles_fromCID[i] = pc_prop(cid, properties = "CanonicalSMILES")
}
}
pc_prop(cid = cid, properties = "CanonicalSMILES")
cid
for (i in 1:length(df_forLoop)){
cid = df_forLoop$CID[i]
if (!is.na(cid)){
print("yes")
df_forLoop$smiles_fromCID[i] = pc_prop(cid, properties = "CanonicalSMILES")
}
}
pc_prop(5564)
url = https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/1/property/CanonicalSMILES/JSON
url = "https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/1/property/CanonicalSMILES/JSON"
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got) %>>% html_text()
source_PubChem
string = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1]))
string
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1]))
smile
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ')
smile
?str_split
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ', n = 2)
smile
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ', n = 2) %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1]))
smile
?str_detect
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[2]][1]))
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][2]))
smile
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>% [2]
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>% (.[2] )
smile
get_smiles_from_CID = function(CID) {
if (is.na(CID)) {
out = "" #I changed this from NA without quotation marks
}
else {
url = sprintf("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/%s/property/CanonicalSMILES/JSON", CID)
out = tryCatch({
url_got = GET(url, user_agent("myagent"))
source_PubChem = read_html(url_got) %>>% html_text()
smile = str_replace_all(source_PubChem, '\\"', '') %>>%
str_split('CanonicalSMILES: ') %>>% unlist() %>>%
map_chr(~ str_split(.x, "\n", n = 2) %>>% (.[[1]][1])) %>>% (.[2] )
return(smile)
},
error = function(e) {
cat("Error:", conditionMessage(e), "\n")
smile = ""
return(smile)
},
silent = TRUE
)
}
return(out)
}
df.test = add_cid[1:10,]
add_smiles = df.test %>>% rowwise() %>>% mutate(CID = get_smiles_from_CID(CID)) %>>% ungroup()
View(add_smiles)
add_smiles = df.test %>>% rowwise() %>>% mutate(smiles_fromCID = get_smiles_from_CID(CID)) %>>% ungroup()
View(add_smiles)
add_smiles = add_cid %>>% rowwise() %>>% mutate(smiles_fromCID = get_smiles_from_CID(CID)) %>>% ungroup()
View(add_smiles)
df.test <- add_smiles[1:10,]
get_cid_from_smiles = function(MY_SMILES) {
MY_CID = get_cid(query = MY_SMILES, from = "smiles", first = T)
if (!is.na(MY_CID)) {
out = pc_prop(cid = MY_CID, properties = "CanonicalSMILES") %>>%
mutate(input = MY_SMILES, check = CanonicalSMILES == input)
} else {
out = data_frame(CID = NA, CanonicalSMILES = NA, input = MY_SMILES, check = NA)
}
return(out)
}
df.test <- add_smiles[1:10,]
next_smiles = df.test$SMILE %>>% map_df(get_cid_from_smiles)
get_cid_from_smiles = function(MY_SMILES) {
MY_CID = get_cid(query = MY_SMILES, from = "smiles", first = T)
}
next_smiles = df.test$SMILE %>>% map_df(get_cid_from_smiles)
?map_df
?get_cid
df.test$CID_fromSMILE <- ""
for(i in 1:length(df.test$SMILE)){
df.test$CID_fromSMILE[i] = get_cid(query = df.test$SMILE[i], from = "smiles", first = T)
}
df.test = add_smiles[1:10,]
df.test$check= df.test$SMILE == df.test$smiles_fromCID
View(df.test)
add_smiles$check= add_smiles$SMILE == add_smiles$smiles_fromCID
View(add_smiles)
write.csv(add_smiles, "checkThisByHand.csv")
